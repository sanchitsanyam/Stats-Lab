https://chatgpt.com/share/67155f32-4828-8005-885a-1d298cc71782

# Data
x = [10, 8, 12, 15, 8, 10]
y = [7, 4, 6, 7, 9, 8]

# Pearson's Correlation Coefficient
def pearson_correlation(x, y):
    n = len(x)
    sum_x = sum(x)
    sum_y = sum(y)
    sum_xy = sum([x[i] * y[i] for i in range(n)])
    sum_x2 = sum([i**2 for i in x])
    sum_y2 = sum([i**2 for i in y])

    numerator = n * sum_xy - sum_x * sum_y
    denominator = ((n * sum_x2 - sum_x**2) * (n * sum_y2 - sum_y**2)) ** 0.5

    return numerator / denominator

# Spearman's Rank Correlation Coefficient
def spearman_rank_correlation(x, y):
    def rank(data):
        sorted_data = sorted((val, i) for i, val in enumerate(data))
        ranks = [0] * len(data)
        rank = 1
        for i in range(len(sorted_data)):
            if i > 0 and sorted_data[i][0] == sorted_data[i - 1][0]:
                # Handle ties by giving them the same rank (average rank)
                ranks[sorted_data[i][1]] = ranks[sorted_data[i - 1][1]]
            else:
                ranks[sorted_data[i][1]] = rank
            rank += 1
        return ranks

    rx = rank(x)
    ry = rank(y)
    n = len(x)

    d = [(rx[i] - ry[i]) for i in range(n)]
    d_squared_sum = sum([di**2 for di in d])

    return 1 - (6 * d_squared_sum) / (n * (n**2 - 1))

# Results
print(f"Pearson's Correlation Coefficient: {pearson_correlation(x, y):.6f}")
print(f"Spearman's Rank Correlation Coefficient: {spearman_rank_correlation(x, y):.6f}")
